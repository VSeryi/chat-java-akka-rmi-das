/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package grapevine;

import akka.actor.ActorRef;
import akka.actor.ActorSelection;
import akka.actor.ActorSystem;
import akka.actor.Props;
import com.typesafe.config.ConfigFactory;
import java.io.IOException;
import java.net.ServerSocket;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Timer;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Stream;
import javax.swing.JOptionPane;

/**
 *
 * @author S.Valeror
 */
public class Grapevine extends javax.swing.JFrame {

    private User myUser;
    private ActorRef myRef;
    private ActorSystem mySystem;
    private ChatMeeting myMeeting;
    private ArrayList<String> chatHistory;

    /**
     * Creates new form Grapevine
     */
    public Grapevine() {
        chatHistory = new ArrayList<>();
        initComponents();
        menuPane.setVisible(false);
        createMeeting.setVisible(false);
        chatPane.setVisible(false);
    }

    public void setMyUser(User myUser) {
        this.myUser = myUser;
    }

    public void setMyMeeting(ChatMeeting myMeeting) {
        this.myMeeting = myMeeting;
    }

    public void showChat() {
        this.myUser = myUser;
        menuPane.setVisible(false);
        createMeeting.setVisible(false);
        chatPane.setVisible(true);
    }
    
    public void writeChat(String username, ChatMessage message) {
        chatHistory.add(username +": "+message.getText());
        listChat.setListData(chatHistory.toArray());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        chatPane = new javax.swing.JLayeredPane();
        jLabel1 = new javax.swing.JLabel();
        sendButton = new javax.swing.JButton();
        scrollChat = new javax.swing.JScrollPane();
        listChat = new javax.swing.JList();
        message = new javax.swing.JTextField();
        backgroundChat = new javax.swing.JLabel();
        menuPane = new javax.swing.JLayeredPane();
        newContactButton = new javax.swing.JButton();
        deleteContactButton = new javax.swing.JButton();
        showEventButton = new javax.swing.JButton();
        newMeetingButton = new javax.swing.JButton();
        bookDateButton = new javax.swing.JButton();
        deleteDateButton = new javax.swing.JButton();
        backgroundMenu = new javax.swing.JLabel();
        createMeeting = new javax.swing.JLayeredPane();
        requestButton = new javax.swing.JButton();
        datePicker = new javax.swing.JSpinner();
        scrollParticipate = new javax.swing.JScrollPane();
        listParticipate = new javax.swing.JList();
        backgroundCreateMeeting = new javax.swing.JLabel();
        loginPane = new javax.swing.JLayeredPane();
        usernameLogin = new javax.swing.JTextField();
        loginButton = new javax.swing.JButton();
        backgroundLogin = new javax.swing.JLabel();
        backgroundLoading = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setFont(new java.awt.Font("Raleway", 1, 12)); // NOI18N
        setForeground(java.awt.Color.white);
        setMaximumSize(new java.awt.Dimension(400, 500));
        setMinimumSize(new java.awt.Dimension(400, 500));
        setName("Fondo"); // NOI18N
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        chatPane.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel1MouseClicked(evt);
            }
        });
        chatPane.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 370, 80));

        sendButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/send.png"))); // NOI18N
        sendButton.setMaximumSize(new java.awt.Dimension(110, 41));
        sendButton.setMinimumSize(new java.awt.Dimension(110, 41));
        sendButton.setPreferredSize(new java.awt.Dimension(110, 41));
        sendButton.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/sendPush.png"))); // NOI18N
        sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButtonActionPerformed(evt);
            }
        });
        chatPane.add(sendButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 450, -1, -1));

        listChat.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(155, 39, 222), 2));
        listChat.setFont(new java.awt.Font("Raleway", 1, 18)); // NOI18N
        listChat.setForeground(new java.awt.Color(155, 39, 222));
        listChat.setToolTipText("");
        listChat.setSelectionBackground(new java.awt.Color(155, 39, 222));
        scrollChat.setViewportView(listChat);

        chatPane.add(scrollChat, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, 380, 340));

        message.setFont(new java.awt.Font("Raleway", 1, 18)); // NOI18N
        message.setForeground(new java.awt.Color(155, 39, 222));
        message.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(155, 39, 222), 2));
        message.setCaretColor(new java.awt.Color(155, 39, 222));
        message.setSelectionColor(new java.awt.Color(155, 39, 222));
        chatPane.add(message, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 450, 260, 40));

        backgroundChat.setIcon(new javax.swing.ImageIcon(getClass().getResource("/background.png"))); // NOI18N
        backgroundChat.setText("jLabel1");
        backgroundChat.setMaximumSize(new java.awt.Dimension(400, 500));
        backgroundChat.setMinimumSize(new java.awt.Dimension(400, 500));
        backgroundChat.setPreferredSize(new java.awt.Dimension(400, 500));
        chatPane.add(backgroundChat, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        getContentPane().add(chatPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        menuPane.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        newContactButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/menu/newContactButton.png"))); // NOI18N
        newContactButton.setMaximumSize(new java.awt.Dimension(311, 46));
        newContactButton.setMinimumSize(new java.awt.Dimension(311, 46));
        newContactButton.setPreferredSize(new java.awt.Dimension(311, 46));
        newContactButton.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/menu/newContactButtonPush.png"))); // NOI18N
        newContactButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newContactButtonActionPerformed(evt);
            }
        });
        menuPane.add(newContactButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 110, -1, -1));

        deleteContactButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/menu/deleteContactButton.png"))); // NOI18N
        deleteContactButton.setMaximumSize(new java.awt.Dimension(311, 46));
        deleteContactButton.setMinimumSize(new java.awt.Dimension(311, 46));
        deleteContactButton.setPreferredSize(new java.awt.Dimension(311, 46));
        deleteContactButton.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/menu/deleteContactButtonPush.png"))); // NOI18N
        deleteContactButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteContactButtonActionPerformed(evt);
            }
        });
        menuPane.add(deleteContactButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 170, -1, -1));

        showEventButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/menu/showEventButton.png"))); // NOI18N
        showEventButton.setMaximumSize(new java.awt.Dimension(311, 46));
        showEventButton.setMinimumSize(new java.awt.Dimension(311, 46));
        showEventButton.setPreferredSize(new java.awt.Dimension(311, 46));
        showEventButton.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/menu/showEventButtonPush.png"))); // NOI18N
        showEventButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showEventButtonActionPerformed(evt);
            }
        });
        menuPane.add(showEventButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 240, -1, -1));

        newMeetingButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/menu/newMeetingButton.png"))); // NOI18N
        newMeetingButton.setMaximumSize(new java.awt.Dimension(311, 46));
        newMeetingButton.setMinimumSize(new java.awt.Dimension(311, 46));
        newMeetingButton.setPreferredSize(new java.awt.Dimension(311, 46));
        newMeetingButton.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/menu/newMeetingButtonPush.png"))); // NOI18N
        newMeetingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newMeetingButtonActionPerformed(evt);
            }
        });
        menuPane.add(newMeetingButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 300, -1, -1));

        bookDateButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/menu/bookDateButton.png"))); // NOI18N
        bookDateButton.setMaximumSize(new java.awt.Dimension(311, 46));
        bookDateButton.setMinimumSize(new java.awt.Dimension(311, 46));
        bookDateButton.setPreferredSize(new java.awt.Dimension(311, 46));
        bookDateButton.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/menu/bookDateButtonPush.png"))); // NOI18N
        bookDateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookDateButtonActionPerformed(evt);
            }
        });
        menuPane.add(bookDateButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 370, -1, -1));

        deleteDateButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/menu/deleteDateButton.png"))); // NOI18N
        deleteDateButton.setMaximumSize(new java.awt.Dimension(311, 46));
        deleteDateButton.setMinimumSize(new java.awt.Dimension(311, 46));
        deleteDateButton.setPreferredSize(new java.awt.Dimension(311, 46));
        deleteDateButton.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/menu/deleteDateButtonPush.png"))); // NOI18N
        deleteDateButton.setVerifyInputWhenFocusTarget(false);
        deleteDateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteDateButtonActionPerformed(evt);
            }
        });
        menuPane.add(deleteDateButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 430, -1, -1));

        backgroundMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/background.png"))); // NOI18N
        backgroundMenu.setText("jLabel1");
        backgroundMenu.setMaximumSize(new java.awt.Dimension(400, 500));
        backgroundMenu.setMinimumSize(new java.awt.Dimension(400, 500));
        backgroundMenu.setPreferredSize(new java.awt.Dimension(400, 500));
        menuPane.add(backgroundMenu, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        getContentPane().add(menuPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        createMeeting.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        requestButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/createMeeting/requestButton.png"))); // NOI18N
        requestButton.setPreferredSize(new java.awt.Dimension(235, 49));
        requestButton.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/createMeeting/requestButtonPush.png"))); // NOI18N
        requestButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requestButtonActionPerformed(evt);
            }
        });
        createMeeting.add(requestButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 440, -1, -1));

        datePicker.setFont(new java.awt.Font("Raleway", 1, 18)); // NOI18N
        datePicker.setModel(new javax.swing.SpinnerDateModel(new java.util.Date(), new java.util.Date(), null, java.util.Calendar.DAY_OF_MONTH));
        datePicker.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(155, 39, 222), 2));
        createMeeting.add(datePicker, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 370, 160, 40));

        listParticipate.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(155, 39, 222), 2));
        listParticipate.setFont(new java.awt.Font("Raleway", 1, 18)); // NOI18N
        listParticipate.setForeground(new java.awt.Color(155, 39, 222));
        listParticipate.setSelectionBackground(new java.awt.Color(155, 39, 222));
        scrollParticipate.setViewportView(listParticipate);

        createMeeting.add(scrollParticipate, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 130, 340, 150));

        backgroundCreateMeeting.setIcon(new javax.swing.ImageIcon(getClass().getResource("/createMeeting/backgroundCreateMeeting.png"))); // NOI18N
        backgroundCreateMeeting.setText("jLabel1");
        backgroundCreateMeeting.setMaximumSize(new java.awt.Dimension(400, 500));
        backgroundCreateMeeting.setMinimumSize(new java.awt.Dimension(400, 500));
        backgroundCreateMeeting.setPreferredSize(new java.awt.Dimension(400, 500));
        createMeeting.add(backgroundCreateMeeting, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        getContentPane().add(createMeeting, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        loginPane.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        usernameLogin.setFont(new java.awt.Font("Raleway", 1, 24)); // NOI18N
        usernameLogin.setForeground(new java.awt.Color(155, 39, 222));
        usernameLogin.setToolTipText("Nombre de Usuario");
        usernameLogin.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(155, 39, 222), 4));
        usernameLogin.setDisabledTextColor(new java.awt.Color(155, 39, 222));
        usernameLogin.setDoubleBuffered(true);
        usernameLogin.setSelectionColor(new java.awt.Color(155, 39, 222));
        usernameLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usernameLoginActionPerformed(evt);
            }
        });
        loginPane.add(usernameLogin, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 340, 340, 46));

        loginButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/login/loginButton.png"))); // NOI18N
        loginButton.setPreferredSize(new java.awt.Dimension(235, 49));
        loginButton.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/login/loginButtonPush.png"))); // NOI18N
        loginButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginButtonActionPerformed(evt);
            }
        });
        loginPane.add(loginButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 420, -1, -1));

        backgroundLogin.setIcon(new javax.swing.ImageIcon(getClass().getResource("/login/backgroundLogin.png"))); // NOI18N
        backgroundLogin.setText("jLabel1");
        backgroundLogin.setMaximumSize(new java.awt.Dimension(400, 500));
        backgroundLogin.setMinimumSize(new java.awt.Dimension(400, 500));
        backgroundLogin.setPreferredSize(new java.awt.Dimension(400, 500));
        loginPane.add(backgroundLogin, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        getContentPane().add(loginPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        backgroundLoading.setIcon(new javax.swing.ImageIcon(getClass().getResource("/backgroundLoading.png"))); // NOI18N
        backgroundLoading.setText("jLabel1");
        backgroundLoading.setMaximumSize(new java.awt.Dimension(400, 500));
        backgroundLoading.setMinimumSize(new java.awt.Dimension(400, 500));
        backgroundLoading.setPreferredSize(new java.awt.Dimension(400, 500));
        getContentPane().add(backgroundLoading, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void loginButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginButtonActionPerformed
        // TODO add your handling code here:
        String username = usernameLogin.getText();
        if (username.isEmpty()) {
            JOptionPane.showMessageDialog(this,
                    "Debe introducir un nombre de usuario válido.",
                    "Error con el usuario",
                    JOptionPane.ERROR_MESSAGE);
        } else {
            try {
                loginPane.setVisible(false);
                int myPort;
                try (ServerSocket s = new ServerSocket(0)) {
                    myPort = s.getLocalPort();
                }
                mySystem = ActorSystem.create("chat", ConfigFactory.parseString("akka.remote.netty.tcp.port=\"" + myPort + "\"").withFallback(ConfigFactory.load()));

                if (Server.checkUser(username)) {
                    Server.updatePort(username, myPort);
                    myRef = mySystem.actorOf(Props.create(User.class, username, Server.getDiary(username), myPort,this),username);
                } else {
                    Server.createUser(username, myPort);
                    myRef = mySystem.actorOf(Props.create(User.class, username, myPort,this),username);
                }
                System.out.println(myRef.path().toString());
                Timer lookMeeting = new Timer();
                lookMeeting.scheduleAtFixedRate(new revisorMeeting(myUser,this), 0, 60*1000);
                menuPane.setVisible(true);
            } catch (IOException ex) {
                Logger.getLogger(Grapevine.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_loginButtonActionPerformed

    private void usernameLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usernameLoginActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_usernameLoginActionPerformed

    private void deleteDateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteDateButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_deleteDateButtonActionPerformed

    private void newContactButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newContactButtonActionPerformed
        String contact = (String) JOptionPane.showInputDialog(
                this,
                "Introduzca el nombre de usuario de su Contacto y pulse OK",
                "Añadir Contacto",
                JOptionPane.QUESTION_MESSAGE,
                null,
                null, null);
        if (contact != null) {
            myUser.getDiary().addContact(contact);
            Server.updateDiary(myUser.getUsername(), myUser.getDiary());
            JOptionPane.showMessageDialog(this,
                    "Añadido Correctamente",
                    "Información",
                    JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_newContactButtonActionPerformed

    private void deleteContactButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteContactButtonActionPerformed
        Object[] options = myUser.getDiary().getContacts().toArray();
        if (options.length == 0) {
            JOptionPane.showMessageDialog(this,
                    "Su lista de contactos ya está vacía",
                    "Información",
                    JOptionPane.INFORMATION_MESSAGE);
        } else {
            String contact = (String) JOptionPane.showInputDialog(
                    this,
                    "Seleccione el contacto a eliminar y pulse Aceptar",
                    "Eliminar Contacto",
                    JOptionPane.WARNING_MESSAGE,
                    null,
                    options,
                    options[0]);
            if (contact != null) {
                myUser.getDiary().removeContact(contact);
                Server.updateDiary(myUser.getUsername(), myUser.getDiary());
                JOptionPane.showMessageDialog(this,
                        "Eliminado Correctamente",
                        "Información",
                        JOptionPane.INFORMATION_MESSAGE);
            }
        }// TODO add your handling code here:
    }//GEN-LAST:event_deleteContactButtonActionPerformed

    private void showEventButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showEventButtonActionPerformed
        Event[] options = Stream.concat(Arrays.stream(myUser.getDiary().getMeetings().toArray()), Arrays.stream(myUser.getDiary().getOtherEvent().toArray())).toArray(Event[]::new);
        Arrays.sort(options);
        if (options.length == 0) {
            JOptionPane.showMessageDialog(this,
                    "Su lista de eventos está vacía",
                    "Información",
                    JOptionPane.INFORMATION_MESSAGE);
        } else {
            String contact = (String) JOptionPane.showInputDialog(
                    this,
                    "Despliegue la lista para ver sus eventos",
                    "Eliminar Contacto",
                    JOptionPane.WARNING_MESSAGE,
                    null,
                    options,
                    options[0]);
        }// TODO add your handling code here:
    }//GEN-LAST:event_showEventButtonActionPerformed

    private void newMeetingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newMeetingButtonActionPerformed
        Object[] options = myUser.getDiary().getContacts().toArray();
        if (options.length == 0) {
            JOptionPane.showMessageDialog(this,
                    "Su lista de contactos está vacía.\nNecesita almenos un contacto para crear una reunión",
                    "Información",
                    JOptionPane.INFORMATION_MESSAGE);
        } else {
            menuPane.setVisible(false);
            listParticipate.setListData(options);
            createMeeting.setVisible(true);
        }// TODO add your handling code here:
    }//GEN-LAST:event_newMeetingButtonActionPerformed

    private void bookDateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookDateButtonActionPerformed

    }//GEN-LAST:event_bookDateButtonActionPerformed

    private void requestButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requestButtonActionPerformed
        if (listParticipate.getSelectedValuesList().isEmpty()) {
            JOptionPane.showMessageDialog(this,
                    "Su lista de participantes está vacía.\nNecesita almenos un participante para crear una reunión",
                    "Información",
                    JOptionPane.WARNING_MESSAGE);
        } else {
            ArrayList<String> participates = (ArrayList<String>) listParticipate.getSelectedValuesList();
            createMeeting.setVisible(false);
            participates.add(myUser.getUsername());
            GregorianCalendar date = new GregorianCalendar();
            date.setTime((Date) datePicker.getValue());
            Event event = new ChatMeeting(date, participates);
            for (String participant : participates) {
                int participantPort = Server.getPort(participant);
                ActorSelection directParticipant = mySystem.actorSelection("akka.tcp://chat@127.0.0.1:" + participantPort + "/user/"+participant);
                directParticipant.tell(event, myRef);
            }
            if (!(myUser.getDiary().getMeetings().contains(event))) {
                for (String participant : participates) {
                    int participantPort = Server.getPort(participant);
                    ActorSelection directParticipant = mySystem.actorSelection("akka.tcp://chat@127.0.0.1:" + participantPort + "/user/"+participant);
                    directParticipant.tell(new RejectedMeeting(event), myRef);
                }
                JOptionPane.showMessageDialog(this,
                        "Algunos de los participantes no puede participar.\nLa reunión no se ha creado.",
                        "Información",
                        JOptionPane.WARNING_MESSAGE);
                createMeeting.setVisible(true);

            } else {
                Server.updateDiary(myUser.getUsername(), myUser.getDiary());
                JOptionPane.showMessageDialog(this,
                        "La reunión se ha creado correctamente.\nSe activará al llegar su hora fijada.",
                        "Información",
                        JOptionPane.INFORMATION_MESSAGE);

                menuPane.setVisible(true);

            }
        }   // TODO add your handling code here:
    }//GEN-LAST:event_requestButtonActionPerformed

    private void sendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendButtonActionPerformed
      String textMessage = message.getText();
        if(!(textMessage.isEmpty())){
          sendButton.setEnabled(false);
          for (String participant : myMeeting.getParticipates()) {
                int participantPort = Server.getPort(participant);
                ActorSelection directParticipant = mySystem.actorSelection("akka.tcp://chat@127.0.0.1:" + participantPort + "/user/"+participant);
                directParticipant.tell(new ChatMessage(textMessage), myRef);
          }
          sendButton.setEnabled(true);
      }  // TODO add your handling code here:
    }//GEN-LAST:event_sendButtonActionPerformed

    private void jLabel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseClicked
        createMeeting.setVisible(false);
        menuPane.setVisible(true);
        // TODO add your handling code here:
    }//GEN-LAST:event_jLabel1MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Grapevine.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Grapevine.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Grapevine.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Grapevine.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Grapevine().setVisible(true);

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel backgroundChat;
    private javax.swing.JLabel backgroundCreateMeeting;
    private javax.swing.JLabel backgroundLoading;
    private javax.swing.JLabel backgroundLogin;
    private javax.swing.JLabel backgroundMenu;
    private javax.swing.JButton bookDateButton;
    private javax.swing.JLayeredPane chatPane;
    private javax.swing.JLayeredPane createMeeting;
    private javax.swing.JSpinner datePicker;
    private javax.swing.JButton deleteContactButton;
    private javax.swing.JButton deleteDateButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JList listChat;
    private javax.swing.JList listParticipate;
    private javax.swing.JButton loginButton;
    private javax.swing.JLayeredPane loginPane;
    private javax.swing.JLayeredPane menuPane;
    private javax.swing.JTextField message;
    private javax.swing.JButton newContactButton;
    private javax.swing.JButton newMeetingButton;
    private javax.swing.JButton requestButton;
    private javax.swing.JScrollPane scrollChat;
    private javax.swing.JScrollPane scrollParticipate;
    private javax.swing.JButton sendButton;
    private javax.swing.JButton showEventButton;
    private javax.swing.JTextField usernameLogin;
    // End of variables declaration//GEN-END:variables
}
